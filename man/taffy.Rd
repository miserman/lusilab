% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/taffy.R
\name{taffy}
\alias{taffy}
\alias{taffyInf}
\title{Simple Clustering}
\usage{
taffy(m, k = nrow(m), minterm = 2, co = 0.975)

taffyInf(m, k = 2)
}
\arguments{
\item{m}{A numeric matrix with column names.}

\item{k}{Number of clusters to look for. This will be the maximum number for \code{taffy},
which will stop when the number of columns in the cluster is less than \code{minterm}.
For \code{taffyInf} this will always be the number returned, and columns may repeat between clusters.}

\item{minterm}{Minimum number of columns a cluster must have to be considered a cluster.}

\item{co}{Quantile-based cutt-off used to assign columns to a cluster.}
}
\value{
A list with vectors of column names (\code{taffy}), or a matrix of weights,
with a column for each cluster, and row for each column (\code{taffyInf}).
}
\description{
Clusters columns in a matrix based on a very minimal algorithm:
\itemize{
\item Start with the column with the biggest sum / smallest other-cluster weight.
\item Calculate its correlation with all other columns, and use that to define a cluster.
\item Repeat with all unassigned columns.
}
\code{taffyInf} differs in that it will not eliminate columns from the pool, but will
base the selection of an initial term on the weight across all previously assigned clusters.
}
\examples{
m <- Matrix(as.matrix(data.frame(
  cluster1_term1 = c(1, 1, 0, 0),
  cluster1_term2 = c(1, 0, 0, 0),
  cluster2_term2 = c(0, 0, 0, 1),
  cluster2_term1 = c(0, 0, 1, 1),
  cluster3_term1 = c(1, 0, 0, 1),
  cluster4_term1 = c(0, 1, 1, 0)
)))
taffy(m, co = .6)
taffyInf(m)
}
