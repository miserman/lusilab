[{"path":"https://miserman.github.io/lusilab/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Micah Iserman. Maintainer.","code":""},{"path":"https://miserman.github.io/lusilab/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Iserman M (2024). lusilab: Language Use Social Interaction Lab. R package version 0.0.1, https://miserman.github.io/lusilab/.","code":"@Manual{,   title = {lusilab: Language Use and Social Interaction Lab},   author = {Micah Iserman},   year = {2024},   note = {R package version 0.0.1},   url = {https://miserman.github.io/lusilab/}, }"},{"path":"https://miserman.github.io/lusilab/index.html","id":"lusilab","dir":"","previous_headings":"","what":"Language Use and Social Interaction Lab","title":"Language Use and Social Interaction Lab","text":"collection functions relating data collection analysis. casual import update original code documentation.","code":""},{"path":"https://miserman.github.io/lusilab/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Language Use and Social Interaction Lab","text":"Download R r-project.org, install package R console: load package:","code":"# install.packages('remotes') remotes::install_github('miserman/lusilab') library(lusilab)"},{"path":"https://miserman.github.io/lusilab/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 lusilab authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://miserman.github.io/lusilab/reference/bablenet_synset.html","id":null,"dir":"Reference","previous_headings":"","what":"BabelNet Synset — bablenet_synset","title":"BabelNet Synset — bablenet_synset","text":"Retrieve BabelNet synset information.","code":""},{"path":"https://miserman.github.io/lusilab/reference/bablenet_synset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BabelNet Synset — bablenet_synset","text":"","code":"bablenet_synset(ids, outDir = NULL, overwrite = FALSE,   cache = paste0(dirname(tempdir()), \"/babelnet_pages/\"),   cores = parallel::detectCores() - 2)"},{"path":"https://miserman.github.io/lusilab/reference/bablenet_synset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BabelNet Synset — bablenet_synset","text":"ids vector BabelNet IDs (e.g., \"bn:00103811a\"). outDir Path directory save parsed page JSON files. overwrite Logical; TRUE, overwrite existing parsed pages retrieved. cache Path directory save original page HTML files. cores Number CPU cores use processing","code":""},{"path":"https://miserman.github.io/lusilab/reference/bablenet_synset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BabelNet Synset — bablenet_synset","text":"list entries id ids.","code":""},{"path":"https://miserman.github.io/lusilab/reference/bablenet_synset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BabelNet Synset — bablenet_synset","text":"","code":"(bablenet_synset(\"bn:00103811a\")) #> $`bn:00103811a` #> $`bn:00103811a`$id #> [1] \"bn:00103811a\" #>  #> $`bn:00103811a`$lemmas #> [1] \"gross\"   \"porcine\" #>  #> $`bn:00103811a`$definitions #>                             source         content #> 1 WordNet 3.0|Open English WordNet Repellently fat #>  #> $`bn:00103811a`$examples #>                             source                content #> 1 WordNet 3.0|Open English WordNet A bald porcine old man #>  #> $`bn:00103811a`$relations #> $`bn:00103811a`$relations$SIMILAR #>             id term #> 1 bn:00102820a  fat #>  #>  #> $`bn:00103811a`$sources #> $`bn:00103811a`$sources$`WordNet 3.0 &amp; Open English WordNet` #>      name         type                                                  url #> 1   gross HIGH_QUALITY   http://wordnetweb.princeton.edu/perl/webwn?s=gross #> 2 porcine HIGH_QUALITY http://wordnetweb.princeton.edu/perl/webwn?s=porcine #>  #>  #>"},{"path":"https://miserman.github.io/lusilab/reference/bspmed.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrapped / Permuted Mediation — bspmed","title":"Bootstrapped / Permuted Mediation — bspmed","text":"Displays results Sobel permutation/bootstrapping tests simple mediation.","code":""},{"path":"https://miserman.github.io/lusilab/reference/bspmed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrapped / Permuted Mediation — bspmed","text":"","code":"bspmed(x, y, m, data = NULL, cov = NULL, random = NULL, su = NA,   i = 1000, method = \"permutation\", alpha = 0.05, figure = TRUE, ...)"},{"path":"https://miserman.github.io/lusilab/reference/bspmed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrapped / Permuted Mediation — bspmed","text":"x X variable: can name variable environment data. y Y variable: can name variable environment data. m Mediating variable: can name variable environment data. data data.frame pull variable, global environment fallback. cov character vector covariates include path. accepted data also specified. random Variable included random intercept lme model: lme(y ~ x + m, random = ~ 1 | random) su Subset applied across variables, e.g., su = x < 2 & m > 0. number iterations processed bootstrapping. Default 1000. method Character specifying test type. Anything starting b perform bootstrapping, otherwise performs non-iterative, permutation--residuals approach described Taylor MacKinnon (2012; Eqs. 9 10). alpha alpha level bootstrapping confidence interval. Default .05 (.e., 2.5% 97.5%). figure Logical; FALSE, display figure. ... Passes additional arguments medfig figure TRUE.","code":""},{"path":"https://miserman.github.io/lusilab/reference/bspmed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrapped / Permuted Mediation — bspmed","text":"Bootstrap confidence intervals indicate significance include zero (confidence intervals effect). Permutation confidence intervals indicate significance include indirect effect (confidence intervals null effect).","code":""},{"path":"https://miserman.github.io/lusilab/reference/bspmed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootstrapped / Permuted Mediation — bspmed","text":"Taylor, . B., & MacKinnon, D. P. (2012). Four applications permutation methods testing single-mediator model. Behavior research methods, 44, 806-844. doi: 10.3758/s13428-011-0181-x","code":""},{"path":[]},{"path":"https://miserman.github.io/lusilab/reference/bspmed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrapped / Permuted Mediation — bspmed","text":"","code":"# This displays the mediation of weight on the relationship # between displacement and miles per gallon. bspmed(disp, mpg, wt, scale(mtcars)) #> Effect of disp on mpg, by way of wt  #> Processed in 1.14 seconds #>  #> Sobel #>       a       b       c      c' indirect #> b 0.888 -0.5440 -0.8476 -0.3645  -0.4831 #> p 0.000  0.0074  0.0000  0.0636   0.0055 #>  #> Permutation confidence intervals #>         2.5%      97.5% all <|> -0.4831 #> CI -1.225169 -0.3872929           FALSE"},{"path":"https://miserman.github.io/lusilab/reference/get_baby_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Baby Names Data — get_baby_names","title":"Get Baby Names Data — get_baby_names","text":"Downloads processes historical baby names data U.S. Social Security Administration.","code":""},{"path":"https://miserman.github.io/lusilab/reference/get_baby_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Baby Names Data — get_baby_names","text":"","code":"get_baby_names(dir = tempdir(), source = \"national\")"},{"path":"https://miserman.github.io/lusilab/reference/get_baby_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Baby Names Data — get_baby_names","text":"dir Directory save data. source dataset download; national (default), state, territory.","code":""},{"path":"https://miserman.github.io/lusilab/reference/get_baby_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Baby Names Data — get_baby_names","text":"list entries data (data.frame original data), summary (matrix count name probabilities per sex).","code":""},{"path":"https://miserman.github.io/lusilab/reference/get_baby_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Baby Names Data — get_baby_names","text":"","code":"if (FALSE) { # \\dontrun{ # saves to a temporary directory names <- get_baby_names() } # }"},{"path":"https://miserman.github.io/lusilab/reference/guess_sex.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess sex based on a web search — guess_sex","title":"Guess sex based on a web search — guess_sex","text":"Searches name (whatever), looks gendered pronouns basic cues sex.","code":""},{"path":"https://miserman.github.io/lusilab/reference/guess_sex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess sex based on a web search — guess_sex","text":"","code":"guess_sex(names, retry = 50,   search_source = \"https://search.yahoo.com/search?q=\",   cores = detectCores() - 2)"},{"path":"https://miserman.github.io/lusilab/reference/guess_sex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess sex based on a web search — guess_sex","text":"names character vector search terms (name). retry Logical; TRUE, retry failed attempt. search_source URL search engine; entry names simply appended. cores Number CPU cores split names across.","code":""},{"path":"https://miserman.github.io/lusilab/reference/guess_sex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guess sex based on a web search — guess_sex","text":"data.frame entries name (original search term), guess, confidence, female male count matches.","code":""},{"path":"https://miserman.github.io/lusilab/reference/guess_sex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guess sex based on a web search — guess_sex","text":"","code":"if (FALSE) { # \\dontrun{ guess_sex(c(\"Jane\", \"John\")) } # }"},{"path":"https://miserman.github.io/lusilab/reference/lusilab-package.html","id":null,"dir":"Reference","previous_headings":"","what":"lusilab: Language Use and Social Interaction Lab — lusilab-package","title":"lusilab: Language Use and Social Interaction Lab — lusilab-package","text":"Includes functions power analysis, permuting bootstrapping mediations, automated factor analysis, pulling text reddit, imsdb, rottentomatoes, plus things play .","code":""},{"path":[]},{"path":"https://miserman.github.io/lusilab/reference/medfig.html","id":null,"dir":"Reference","previous_headings":"","what":"Mediation Figure — medfig","title":"Mediation Figure — medfig","text":"Plot simple mediation figures, maybe displaying indirect effects confidence intervals sort, potentially saving .","code":""},{"path":"https://miserman.github.io/lusilab/reference/medfig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mediation Figure — medfig","text":"","code":"medfig(mat, ci = NULL, ci.type = NULL, xlab = \"x variable\",   ylab = \"y variable\", mlab = \"mediating variable\", title = FALSE,   note = TRUE, box = TRUE, digits = 3, note.sig = TRUE,   fin.length = 0.5, cords.box = list(), cords.arrow = list(),   padding.box = 0.05, padding.arrow = 0.02, padding.number = 0.02,   padding.title = 0.1, padding.note = 0.1, arrow.scale = 0.01,   box.fill = NA, center.adj = 0.1, color = c(line = NA, box = NA, label =   NA, number = NA, title = NA, note = NA), weight = c(line = NA, box = NA,   label = NA, number = NA, title = 2, note = 0.9), save = FALSE,   format = pdf, name = \"mediation\", ...)"},{"path":"https://miserman.github.io/lusilab/reference/medfig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mediation Figure — medfig","text":"mat Output bspmed, matrix two rows 4-5 columns (see example). ci vector confidence intervals (one lower one upper). entries named, read numbers added together displayed percent (see example). ci.type Text displayed note (.e., ci.type confidence intervals). xlab, ylab, mlab Text displayed variable box. title, note, box Logical indicating whether draw element. digits Number digits round . note.sig Logical indicating whether asterisks corresponding p-values added numbers. fin.length Length arrowhead fins, back line intersection (0 flat base, triangular arrowhead). cords.box Center position box. list least one coordinate pair (vector values y x position). entries named, x, y, m assigned names; coordinates pairs can entered positionally named. Default list(x = c(.1, .1), m = c(.5, .9), y = c(.9, .1)). cords.arrow Position arrow. behaves way cords.box, entries names , b, c, set coordinates 4 values specifying start end positions. unspecified coordinates calculated based box positions. padding.box, padding.arrow, padding.number, padding.title, padding.note Specifies padding around elements; box adjust space around texts box, arrow adjust distance boxes, number adjusts space numbers lines. arrow.scale Size arrowhead. box.fill Color box backgrounds. center.adj Amount shift center text downward (positive values making center text closer bottom). color vector named entries corresponding elements (line, box, label, number, title, note). Box refers color line (whereas box.fill specifies background). Single unnamed values applied elements. weight weight arrow lines box outlines, size numbers texts. Behaves color. save, format, name Information used saving figure file; specified, image saved. Format refers graphics engine; default pdf. elements may show properly using engines (cairo_pdf). engines included base link[grDevices]{grDevices} package. Another option emf devEMF package (used create example image). ... Additional arguments passed par (parameters plot frame).","code":""},{"path":[]},{"path":"https://miserman.github.io/lusilab/reference/medfig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mediation Figure — medfig","text":"","code":"# by default, the bspmed function will show a figure bspmed(disp, mpg, wt, scale(mtcars)) #> Effect of disp on mpg, by way of wt  #> Processed in 0.99 seconds #>  #> Sobel #>       a       b       c      c' indirect #> b 0.888 -0.5440 -0.8476 -0.3645  -0.4831 #> p 0.000  0.0074  0.0000  0.0636   0.0055 #>  #> Permutation confidence intervals #>         2.5%      97.5% all <|> -0.4831 #> CI -1.132512 -0.3899162           FALSE   # you can also save the output from a bspmed call and plot a figure for it later: med <- bspmed(disp, mpg, wt, scale(mtcars), figure = FALSE) #> Effect of disp on mpg, by way of wt  #> Processed in 0.99 seconds #>  #> Sobel #>       a       b       c      c' indirect #> b 0.888 -0.5440 -0.8476 -0.3645  -0.4831 #> p 0.000  0.0074  0.0000  0.0636   0.0055 #>  #> Permutation confidence intervals #>         2.5%      97.5% all <|> -0.4831 #> CI -1.173451 -0.3800334           FALSE medfig(med)   # Or you can enter a matrix, with confidence intervals in the second position, # and what type they are in the third. mat <- matrix(   c(.89, .0001, -.54, .001, -.85, .0001, -.36, .05, -.48, .001),   2,   dimnames = list(c(\"b\", \"p\"), c(\"a\", \"b\", \"c\", \"c'\", \"i\")) ) medfig(mat, c(\"2.5\" = -.38, \"97.5\" = .37), \"Permutation\")"},{"path":"https://miserman.github.io/lusilab/reference/parapower.html","id":null,"dir":"Reference","previous_headings":"","what":"Parametric Power Analysis — parapower","title":"Parametric Power Analysis — parapower","text":"Parametric effect size related functions tests along lines balanced ANOVAs (e.g., certain t-tests, correlations, regressions).","code":""},{"path":"https://miserman.github.io/lusilab/reference/parapower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parametric Power Analysis — parapower","text":"","code":"parapower(effect = NULL, type = \"f\", N = NULL, k = 2, alpha = 0.05,   power = 0.8, range)  convert_effect(effect, type = \"r\", N = 3, k = 2, adjust_f = TRUE,   display_f = FALSE, print = TRUE)  critical_effect(N, k = 2, alpha = 0.05)"},{"path":"https://miserman.github.io/lusilab/reference/parapower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parametric Power Analysis — parapower","text":"effect Effect size specified type. type Type effect entered. Available types Pearson's r (r), Cohen's d (d), Area Curve (AUC; ), Odds Ratio (o), η2 (eta-squared; R2; e), Cohen's f (f). N Total sample size. k Number groups cells, 2 default generally appropriate. alpha Alpha level (p-value; theoretical type error / false positive). power Power (1 – β; inverse theoretical type II error / false negative). range Interval estimated component optimizer try. Defaults c(2, 10000) N, c(0, 100) effect, c(0, 1) power alpha. get error uniroot (like \"f() values end points opposite sign\"), try increasing range (e.g., smaller low end large effects, larger high end small effects). adjust_f Logical indicating whether entered effect type f converted F Cohen's f based N k: sqrt((k - 1) * F / (N - k)). display_f Logical; TRUE, calculates F associated p-value based N k. print Logical; FALSE, results invisibly returned.","code":""},{"path":"https://miserman.github.io/lusilab/reference/parapower.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parametric Power Analysis — parapower","text":"type power analysis becomes increasingly difficult complex models. cases, simulation handy (though difficult abstract terms specification) –- can reasonably simulate data mind, can reasonably estimate power model. See Monte Carlo section examples.","code":""},{"path":"https://miserman.github.io/lusilab/reference/parapower.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parametric Power Analysis — parapower","text":"","code":"# a priori power analysis (looking for n given an effect size, alpha, and power) # with no arguments, this defaults to effect = c(.3, .5, .7), type = 'd' parapower() #>    n k   N alpha power Pearson's r Cohen's d    AUC Odds Ratio   eta^2 #>  176 2 352  0.05   0.8      0.1483       0.3 0.5840      1.723 0.02200 #>   64 2 128  0.05   0.8      0.2425       0.5 0.6382      2.477 0.05882 #>   34 2  68  0.05   0.8      0.3304       0.7 0.6897      3.560 0.10913 #>  Cohen's f     F num_df den_df p-value #>       0.15 3.901      1 173.38 0.04984 #>       0.25 3.860      1  61.77 0.05394 #>       0.35 3.801      1  31.02 0.06033  # sensitivity analysis (looking for an effect size given n, alpha, and power) parapower(N = 50) #>   n k   N alpha power Pearson's r Cohen's d    AUC Odds Ratio   eta^2 Cohen's f #>  50 2 100  0.05   0.8      0.2723    0.5659 0.6555      2.791 0.07413     0.283 #>      F num_df den_df p-value #>  3.843      1     48 0.05577  # post-hoc power analysis (looking for power given an effect size, n, and alpha) # since 'f' is the default type, this is power given Cohen's f = .3 parapower(.3, N = 50) #>   n k   N alpha  power Pearson's r Cohen's d    AUC Odds Ratio   eta^2 #>  50 2 100  0.05 0.8439      0.2873       0.6 0.6643      2.969 0.08257 #>  Cohen's f    F num_df den_df p-value #>        0.3 4.32      1     48 0.04304  # criterion analysis (looking for alpha given an effect size, n, and power) parapower(.3, N = 50, power = .8) #>   n k   N   alpha power Pearson's r Cohen's d    AUC Odds Ratio   eta^2 #>  50 2 100 0.03369   0.8      0.2873       0.6 0.6643      2.969 0.08257 #>  Cohen's f    F num_df den_df p-value #>        0.3 4.32      1     48 0.04304  # # Monte Carlo power analysis #  # simulate a simple effect: continuous normal x and related y N <- 20 x <- rnorm(N) y <- x * .4 + rnorm(N) summary(lm(y ~ x)) #>  #> Call: #> lm(formula = y ~ x) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1.23994 -0.57602  0.08468  0.39595  1.75405  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)    #> (Intercept)   0.6189     0.1931   3.205  0.00491 ** #> x             0.7918     0.2123   3.729  0.00154 ** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.8536 on 18 degrees of freedom #> Multiple R-squared:  0.4358,\tAdjusted R-squared:  0.4045  #> F-statistic:  13.9 on 1 and 18 DF,  p-value: 0.001536 #>   ## here, we can input the correlation to get other effect sizes ## k defaults to 2, which is appropriate in this case convert_effect(cor(x, y), N = N) #>  Pearson's r Cohen's d    AUC Odds Ratio  eta^2 Cohen's f    F num_df den_df #>       0.6602     1.758 0.8931      24.25 0.4358    0.8789 13.9      1     18 #>   p-value #>  0.001536  ## we want to know what N gives us .8 power to detect this effect at .05 alpha ## we can set up a function to easily try different Ns sim1 <- function(N, beta = .4, batches = 100, alpha = .05, power = .8) {   # first, set up a vector of 0s, which we'll fill with results from each run   op <- numeric(batches)   # now we repeat the simulation batches times   # (with i tracking the index of op)   for (i in seq_len(batches)) {     # reroll the simulated variables     x <- rnorm(N)     y <- x * beta + rnorm(N)     # set the current op entry to the p-value of the test     op[i] <- summary(lm(y ~ x))$coef[2, 4]   }   # observed power is percent of p-values under alpha   # output of the function is observed power - set power for optimization   # (where the target is 0; closest observed to set power)   mean(op < alpha) - power }  ## uniroot will try different values of N (between 20 and 100 here), ## and output the one that gets closest to the set power uniroot(sim1, c(20, 100))$root #> [1] 56.62202  if (FALSE) { # \\dontrun{  ## setting power to 0 will give the observed power ## increase batches for more stable estimates sim1(55, batches = 5000, power = 0)  ## compare with a binary x sim1b <- function(N, beta = .4, batches = 100, alpha = .05, power = .8) {   op <- numeric(batches)   for (i in seq_len(batches)) {     x <- rep_len(c(0, 1), N)     y <- x * beta + rnorm(N)     op[i] <- summary(lm(y ~ x))$coef[2, 4]   }   mean(op < alpha) - power } uniroot(sim1b, c(100, 300))$root sim1b(200, batches = 5000, power = 0)  # this is what the most basic parametric power analysis is getting at parapower(.4, \"d\")  # simulate a more complicated effect: two binary variables with an interaction effect c1 <- sample(c(0, 1), N, TRUE) c2 <- sample(c(0, 1), N, TRUE) y <- c2 * c1 * .8 + rnorm(N) (m <- summary(lm(y ~ c1 * c2)))  ## R-squared is eta^2, and k is 4 (2x2) convert_effect(m$r.squared, \"eta^2\", N, 4)  ## same kind of function as before, only difference is the simulated data and test ## also have to recalculate the omnibus p-value since it's not returned sim2 <- function(N, beta = .8, batches = 100, alpha = .05, power = .8) {   op <- numeric(batches)   for (i in seq_len(batches)) {     c1 <- sample(c(0, 1), N, TRUE)     c2 <- sample(c(0, 1), N, TRUE)     y <- c2 * c1 * beta + rnorm(N)     f <- summary(lm(y ~ c1 * c2))$fstatistic     op[i] <- pf(f[1], f[2], f[3], lower.tail = FALSE)   }   mean(op < alpha) - power } uniroot(sim2, c(50, 300))$root sim2(100, batches = 5000, power = 0)  ## note here that we're looking at the omnibus test ## if you're actually interested in, say, the interaction effect, that may affect power sim2i <- function(N, beta = .8, batches = 100, alpha = .05, power = .8) {   op <- numeric(batches)   for (i in seq_len(batches)) {     c1 <- sample(c(0, 1), N, TRUE)     c2 <- sample(c(0, 1), N, TRUE)     y <- c2 * c1 * beta + rnorm(N)     op[i] <- summary(lm(y ~ c1 * c2))$coef[4, 4]   }   mean(op < alpha) - power } uniroot(sim2i, c(100, 300))$root sim2i(200, batches = 5000, power = 0) } # }"},{"path":"https://miserman.github.io/lusilab/reference/personality_database.html","id":null,"dir":"Reference","previous_headings":"","what":"Personality-Database API — personality_database","title":"Personality-Database API — personality_database","text":"Collect data personality-database API.","code":""},{"path":"https://miserman.github.io/lusilab/reference/personality_database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Personality-Database API — personality_database","text":"","code":"personality_database(profiles = \"famous\", category = \"all\",   outFile = NULL, sort = \"alphabet\", start = 0, limit = Inf,   retry = 10, sleep_time = 60, verbose = TRUE,   cache = paste0(tempdir(), \"/personality_database/\"), list_cache = NULL,   cores = detectCores() - 1)"},{"path":"https://miserman.github.io/lusilab/reference/personality_database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Personality-Database API — personality_database","text":"profiles Name profile list, famous, fictional, discovery. category Name profile category, listed list, (default). outFile Path .csv file save results . sort profile list sorted, alphabet (default), hot, new, top. start Profile list start . limit Maximum number profiles include. retry Logical; TRUE, retry failed attempt. sleep_time Number seconds wait retries. verbose Logical; FALSE, display status messages. cache Path directory save raw responses. list_cache saved profile list, path file, collect scores . Providing avoids collecting list initially. cores Number CPU cores split names across.","code":""},{"path":"https://miserman.github.io/lusilab/reference/personality_database.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Personality-Database API — personality_database","text":"data.frame entries name (original search term), guess, confidence, female male count matches.","code":""},{"path":"https://miserman.github.io/lusilab/reference/personality_database.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Personality-Database API — personality_database","text":"","code":"if (FALSE) { # \\dontrun{ # get scores from the 5 \"HOT\"est famous people hot5 <- personality_database(limit = 5, sort = \"hot\") } # }"},{"path":"https://miserman.github.io/lusilab/reference/predict_demographics.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Demographics From Name — predict_demographics","title":"Predict Demographics From Name — predict_demographics","text":"Predict sex maybe country name.","code":""},{"path":"https://miserman.github.io/lusilab/reference/predict_demographics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Demographics From Name — predict_demographics","text":"","code":"predict_demographics(given, family = NULL, country = NULL,   source = \"all\", dir = tempdir(), ssa_source = \"national\",   full_country = FALSE, verbose = TRUE)"},{"path":"https://miserman.github.io/lusilab/reference/predict_demographics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Demographics From Name — predict_demographics","text":"given vector given (first) names. Case sensitive wgnd. family vector family (last; sur) names. used fb adjust country predictions. Case sensitive. country vector 2-letter country codes. used wgnd give sex_in_country_wgnd. source vector specify source(s) use: World Gender Name Dictionary (wgnd) Facebook Hack (fb) Skydeck Censuses (skydeck) U.S. Social Security Administration Baby Names (usssa) U.S. Patent Trademark Office Inventors (uspto) Defaults return . dir Directory save original prepared names data. ssa_source Source USSSA data; passed get_baby_names. full_country Logical; TRUE, column country returned source fb, containing probability country. Otherwise, likely country returned predicted_country column. verbose Logical; FALSE, show status messages.","code":""},{"path":"https://miserman.github.io/lusilab/reference/predict_demographics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Demographics From Name — predict_demographics","text":"data.frame columns given, family, country (provided), columns source, including count prob_fem prefixed source code, fb, either predicted_country_fb, set country codes prefixed _fb.","code":""},{"path":"https://miserman.github.io/lusilab/reference/predict_demographics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict Demographics From Name — predict_demographics","text":"","code":"if (FALSE) { # \\dontrun{  # saves to a temporary directory predict_demographics(c(\"Jane\", \"John\"), c(\"Doe\", \"Doe\")) } # }"},{"path":"https://miserman.github.io/lusilab/reference/reddit.html","id":null,"dir":"Reference","previous_headings":"","what":"Reddit — reddit","title":"Reddit — reddit","text":"parts, wrapper RedditExtractoR package; pulls posts comments specified subreddits searches.","code":""},{"path":"https://miserman.github.io/lusilab/reference/reddit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reddit — reddit","text":"","code":"reddit(topics, search = NULL, ..., sort = \"hot\", filename = \"reddit.csv\",   write = TRUE, lim = 100, filter = \"\\\\[removed\\\\]\", clean = TRUE,   comments_only = FALSE, posts_only = FALSE,   useragent = paste(\"R LUSI @\", date()))  reddit.karma(users)  reddit.usercomments(users, filename = NULL, subreddits = NULL, lim = 100,   type = \"comments\", useragent = paste(\"R LUSI @\", date()))  reddit.lsm(data)"},{"path":"https://miserman.github.io/lusilab/reference/reddit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reddit — reddit","text":"topics string vector strings corresponding subreddit names (e.g., 'trees' referring reddit.com/r/trees/). first value used search specified. search Passed find_thread_urls search_terms argument. specified, topic specified, first topic value added subreddit argument (restrict search subreddit). ... Passed additional arguments find_thread_urls search specified. sort sort initial comments. applies search specified. Default 'hot', 'new', 'rising', 'top', 'gilded', 'ads', options. filename Name file saved current working directory. currently always csv file. write Logical: FALSE, data save file (just stored objects named reddit call). lim Numeric: sets number posts pull per topic. applies search specified. filter Passed grepl. pattern used filter posts content comments. default '\\[removed\\]' filter comments deleted. clean Logical; FALSE, converts curly straight quotes. comments_only Logical; TRUE, exclude original posts thread. posts_only Logical; TRUE, collect initial post thread. changes returned, relative posts returned along comments. useragent String set request's User-Agent. users vector user names (reddit.com/user/username; user column reddit function). Information never gathered twice user; reddit.usercomments simply removes duplicate user names (.e., unique(users)), whereas reddit.karma return karma scores order input, filling information duplicate users. subreddits vector subreddits filter ; comments within specified subreddits returned. exactly match subreddit_name_prefix field (e.g., 'r/Anxiety' https://www.reddit.com/r/Anxiety/), including 'r/' subreddit name, though added missing. type Type user data download; either 'comments' 'submissions' (posts). data data.frame returned reddit call (e.g., comments = reddit('trees'); reddit.lsm(comments))","code":""},{"path":"https://miserman.github.io/lusilab/reference/reddit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reddit — reddit","text":"reddit posts_only FALSE: data.frame row post / comment: url: URL thread. author: Username author. date: Date submission YYYY-MM-DD format. timestamp: Time submission seconds since 1970-01-01; use .POSIXct convert date object. score: Score. upvotes: Number downvotes. downvotes: Number upvotes. golds: Number golds. comment: Text submission. Called comment compatibility, though may post comment, indicated type. comment_id: Position submission within thread, 0 means original post. type: Whether submission comment post. posts_only TRUE, data.frame variables Reddit response, , instance, text selftext.","code":""},{"path":"https://miserman.github.io/lusilab/reference/reddit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reddit — reddit","text":"","code":"if (FALSE) { # \\dontrun{ # these will all save a file called 'reddit.csv' to the current working directory. # pulls from a single, depression related subreddit: reddit(\"depression\")  # pull from a few subreddits, also saving the data as an object ('comments'): topics <- c(\"trees\", \"Meditation\") comments <- reddit(topics)  # pull comments from a search reddit(search = \"politics\")  # calculate language style matching between each comment and the comment it's replying to # within the first thread of the trees subreddit thread_lsm <- reddit.lsm(comments[comments$title == comments$title[1], ])  # download the 5 most recent comments from 10 users who commented in the trees subreddit user_comments <- reddit.usercomments(comments$user[1:5], lim = 5) } # }"},{"path":"https://miserman.github.io/lusilab/reference/taffy.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Clustering — taffy","title":"Simple Clustering — taffy","text":"Clusters columns matrix based minimal algorithm: Start column biggest sum / smallest -cluster weight. Calculate correlation columns, use define cluster. Repeat unassigned columns. taffyInf differs eliminate columns pool, base selection initial term weight across previously assigned clusters.","code":""},{"path":"https://miserman.github.io/lusilab/reference/taffy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Clustering — taffy","text":"","code":"taffy(m, k = nrow(m), minterm = 2, co = 0.975)  taffyInf(m, k = 2)"},{"path":"https://miserman.github.io/lusilab/reference/taffy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Clustering — taffy","text":"m numeric matrix column names. k Number clusters look . maximum number taffy, stop number columns cluster less minterm. taffyInf always number returned, columns may repeat clusters. minterm Minimum number columns cluster must considered cluster. co Quantile-based cutt-used assign columns cluster.","code":""},{"path":"https://miserman.github.io/lusilab/reference/taffy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Clustering — taffy","text":"list vectors column names (taffy), matrix weights, column cluster, row column (taffyInf).","code":""},{"path":"https://miserman.github.io/lusilab/reference/taffy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple Clustering — taffy","text":"","code":"m <- Matrix(as.matrix(data.frame(   cluster1_term1 = c(1, 1, 0, 0),   cluster1_term2 = c(1, 0, 0, 0),   cluster2_term2 = c(0, 0, 0, 1),   cluster2_term1 = c(0, 0, 1, 1),   cluster3_term1 = c(1, 0, 0, 1),   cluster4_term1 = c(0, 1, 1, 0) ))) taffy(m, co = .6) #> [[1]] #> [1] \"cluster1_term1\" \"cluster1_term2\" #>  #> [[2]] #> [1] \"cluster2_term2\" \"cluster2_term1\" #>  taffyInf(m) #>                         1          2 #> cluster1_term1  1.0000000 -1.0000000 #> cluster1_term2  0.5773503 -0.5773503 #> cluster2_term2 -0.5773503  0.5773503 #> cluster2_term1 -1.0000000  1.0000000 #> cluster3_term1  0.0000000  0.0000000 #> cluster4_term1  0.0000000  0.0000000"}]
